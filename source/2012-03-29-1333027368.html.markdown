---
title:  オブジェクト接合部
date: 2012-03-29
tags: java
---
[![レガシーコード改善ガイド (Object Oriented
SELECTION)](http://ecx.images-amazon.com/images/I/51MtlVCi45L._SL160_.jpg "レガシーコード改善ガイド (Object Oriented SELECTION)")](http://www.amazon.co.jp/dp/4798116831/?tag=hatena_st1-22&ascsubtag=d-s2pfr)

[レガシーコード改善ガイド (Object Oriented
SELECTION)](http://www.amazon.co.jp/dp/4798116831/?tag=hatena_st1-22&ascsubtag=d-s2pfr)

-   作者:
    [マイケル・C・フェザーズ](http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B1%A5%EB%A1%A6C%A1%A6%A5%D5%A5%A7%A5%B6%A1%BC%A5%BA),[ウルシステムズ株式会社](http://d.hatena.ne.jp/keyword/%A5%A6%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0%A5%BA%B3%F4%BC%B0%B2%F1%BC%D2),[平澤章](http://d.hatena.ne.jp/keyword/%CA%BF%DF%B7%BE%CF),[越智典子](http://d.hatena.ne.jp/keyword/%B1%DB%C3%D2%C5%B5%BB%D2),[稲葉信之](http://d.hatena.ne.jp/keyword/%B0%F0%CD%D5%BF%AE%C7%B7),[田村友彦](http://d.hatena.ne.jp/keyword/%C5%C4%C2%BC%CD%A7%C9%A7),[小堀真義](http://d.hatena.ne.jp/keyword/%BE%AE%CB%D9%BF%BF%B5%C1)
-   出版社/メーカー:
    [翔泳社](http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2)
-   発売日: 2009/07/14
-   メディア: 大型本
-   購入: 45人 クリック: 673回
-   [この商品を含むブログ (145件)
    を見る](http://d.hatena.ne.jp/asin/4798116831)

これを読んでいて気になる所があったのでテスト。

4.3.3　オブジェクト接合部

この章はオブジェクト指向言語で、テストしたいメソッドの中に他のクラスのメソッドや自クラス内のメソッドを呼び出す記述がある時に、メソッド間の依存性を断つにはどうすれば良いかって話。

他クラスのメソッドを呼び出している場合は、テスト対象クラス以外のクラスはインターフェース切って、擬似オブジェクト作るのが有効。それは知ってた。

もう一つ。自クラスのメソッドを呼び出してる場合は、テスト対象クラスを継承したクラスを作って、テスト対象メソッドから呼び出されているメソッドをオーバーライドして擬似メソッド化すると良いらしい。

\

自分の中でちょっとどうなるか曖昧な部分があったので、とりあえずテスト。

\

テスト対象クラス。

~~~~ {.syntax-highlight}
package com.hello.world;

public class ExtendClassTest {

    public void methodA(){
        methodB();
    }
    
    public void methodB(){
        System.out.println("親クラス");
    }
}
~~~~

ExtendClassTestクラスのmethodA()がテスト対象。

これはメソッド内部でmethodB()を呼び出してるため、その振る舞いがmethodB()に依存する。

この依存を断ち切るためにExtendClassTestを継承したクラスExtendClassTest2を作る。

~~~~ {.syntax-highlight}
package com.hello.world;

public class ExtendClassTest2 extends ExtendClassTest {

    public void methodB(){
        System.out.println("子クラス");
    }
}
~~~~

ここで、テスト対象でないmethodB()のみをオーバーライドする。

そして、このExtendClassTest2のテストクラスを作成し、ExtendClassTest2のオブジェクトが持つテスト対象メソッドmethodA()を実行してみる。

~~~~ {.syntax-highlight}
package com.hello.world;

import junit.framework.TestCase;

public class ExtendClassTest2Test extends TestCase {

    public void test(){
        new ExtendClassTest2().methodA();
    }
}
~~~~

すると結果は

    子クラス

うん、スッキリした。

[![このエントリーをはてなブックマークに追加](http://b.st-hatena.com/images/entry-button/button-only.gif)](http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp "このエントリーをはてなブックマークに追加")

[ツイートする](http://twitter.com/share)
